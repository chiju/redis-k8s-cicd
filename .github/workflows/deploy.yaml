name: CI/CD for Infrastructure and Redis Deployment

on:
  push:
    branches:
      - main

jobs:
  setup-backend:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-west-2
      AWS_DEFAULT_REGION: us-west-2
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
    # Checkout the code
    - name: Checkout code
      uses: actions/checkout@v2

    # Set up AWS credentials
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # Create or verify the S3 bucket and DynamoDB table for backend
    - name: Create Backend Resources
      run: |
        # Set the bucket name
        BUCKET_NAME="unzer-test-terraform-state-bucket"

        # Create S3 Bucket if it doesn't exist
        if ! aws s3api head-bucket --bucket $BUCKET_NAME --region ${{ env.AWS_REGION }} 2>/dev/null; then
          aws s3api create-bucket --bucket $BUCKET_NAME --region ${{ env.AWS_REGION }} --create-bucket-configuration LocationConstraint=${{ env.AWS_REGION }}
        fi

        # Enable versioning on the bucket
        aws s3api put-bucket-versioning --bucket $BUCKET_NAME --region ${{ env.AWS_REGION }} --versioning-configuration Status=Enabled

        # Create DynamoDB Table if it doesn't exist
        if ! aws dynamodb describe-table --table-name terraform-lock-table --region ${{ env.AWS_REGION }} 2>/dev/null; then
          aws dynamodb create-table \
            --table-name terraform-lock-table \
            --attribute-definitions AttributeName=LockID,AttributeType=S \
            --key-schema AttributeName=LockID,KeyType=HASH \
            --billing-mode PAY_PER_REQUEST \
            --region ${{ env.AWS_REGION }}
        fi
      shell: /usr/bin/bash -e {0}

  deploy:
    runs-on: ubuntu-latest
    needs: setup-backend
    env:
      AWS_REGION: us-west-1  # Define the AWS region here

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up AWS credentials for Terraform and EKS
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Set up Terraform with the official Terraform GitHub Action (using version 1.9.5)
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.5

      # Initialize Terraform
      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      # Plan Terraform changes
      - name: Terraform Plan
        working-directory: ./terraform
        run: terraform plan

      # Apply Terraform changes to provision infrastructure
      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve
      
      - name: Print Terraform Outputs
        working-directory: ./terraform
        run: terraform output

      - name: Get EKS Cluster Name
        id: get_cluster_name
        run: |
          EKS_CLUSTER_NAME=$(terraform output -raw eks_cluster_name)
          echo "EKS_CLUSTER_NAME=$EKS_CLUSTER_NAME" >> $GITHUB_ENV
          echo "EKS_CLUSTER_NAME=$EKS_CLUSTER_NAME" >> $GITHUB_OUTPUT

      - name: update kubeconfig
        run: aws eks update-kubeconfig --name my-eks-cluster --region ${{ env.AWS_REGION }}

      # Install kubectl
      - name: Install kubectl
        uses: azure/setup-kubectl@v1
        with:
          version: 'v1.30.3'

      # Verify kubectl configuration
      - name: Verify kubectl configuration
        run: kubectl get nodes || echo "Failed to get nodes"

      # Install Helm
      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

      # Deploy Redis using Helm (without overriding replica settings)
      - name: Deploy Redis Cluster
        run: |
          helm upgrade --install redis ./helm/redis -f ./helm/redis/values.yaml

      # Ensure Redis is deployed successfully
      - name: Check Redis Deployment
        run: kubectl rollout status statefulset redis-master

      # Optional: Monitor Redis deployment
      - name: Verify Redis Pods
        run: kubectl get pods -l app.kubernetes.io/name=redis
